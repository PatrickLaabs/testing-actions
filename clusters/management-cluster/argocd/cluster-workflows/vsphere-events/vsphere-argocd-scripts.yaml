---
apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-scripts
  namespace: argo
data:
  add-to-argocd.sh: |
    #!/bin/sh

    argocd login argo-hub-mgmt-t.projekte.eitco.de --insecure --grpc-web --username admin --password $PASSWORD

    cluster_ready=""
    cluster=$1
    while [ -z "$cluster_ready" ]
    do
        sleep 20
        kubectl get cluster $cluster -n default
        cluster_ready=$(kubectl get cluster $cluster -o json -n default | jq -r '. | select(.status.phase=="Provisioned")')
    done

    kubectl config set-cluster in-cluster --server=https://kubernetes.default.svc.cluster.local --certificate-authority=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt --embed-certs=true ;
    kubectl config set-credentials clusterctl --token=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token) ;
    kubectl config set-context in-cluster --cluster in-cluster --user clusterctl --namespace argocd ;
    kubectl config use-context in-cluster ;

    echo "Print in-clusters current used context: "
    kubectl config current-context

    # clusterctl get kubeconfig $cluster -n default > $HOME/.kube/vsphere-cluster.yaml
    kubectl -n default get secret/$cluster-kubeconfig -o json \
                  | jq -r .data.value \
                  | base64 --decode \
                  > $HOME/.kube/vsphere-cluster.yaml
    export KUBECONFIG="$HOME/.kube/config:$HOME/.kube/vsphere-cluster.yaml"

    kubectl config set-context $cluster --cluster $cluster --user $cluster-admin
    kubectl config use-context $cluster --cluster $cluster --user $cluster-admin
    sleep 30

    kubectl create namespace argo 
    kubectl create namespace argocd

    argocd cluster add $cluster-admin@$cluster --name $cluster --label provider=vsphere --upsert -y --cluster-resources --namespace argocd
    
    kubectl apply -f https://raw.githubusercontent.com/argoproj/argo-cd/v2.9.3/manifests/install.yaml -n argocd

    # Allow ArgoCD to manage all Namespaces
    argocd cluster set $cluster --name $cluster --namespace '*'

    kubectl apply -f - <<EOF
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      name: argocd-application-controller-clusterrole
    rules:
    - apiGroups:
      - '*'
      resources:
      - '*'
      verbs:
      - '*'
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      name: argocd-application-controller-clusterrole-binding
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: argocd-application-controller-clusterrole
    subjects:
    - kind: ServiceAccount
      name: argocd-application-controller
      namespace: default
    EOF

    ### Creating Deployment Keys ###
    ssh-keygen -t rsa -C "argocd deploykey sets" -N "" -f ~/.ssh/id_rsa

    export privateKey="$(cat ~/.ssh/id_rsa)"
    export encPrivateKey="$(echo "$privateKey" | base64 | tr -d '\n')"

    export publicKey="$(cat ~/.ssh/id_rsa.pub)"
    export encPublicKey="$(echo "$publicKey" | base64 | tr -d '\n')"
    echo "======= Public Key ======="
    echo $publicKey

    export repourl=git@github.com:eitco/argo-repo-${cluster}.git
    export encRepourl="$(echo "$repourl" | tr -d '\n' | base64)"

    #echo "Adding vCluster Provider to workload Cluster"
    #clusterctl init --infrastructure vcluster

    # Create Remote's Repositories for ArgoCD Usage on Github
    gh auth login

    gh repo create eitco/argo-repo-"${cluster}" --private --template=eitco/workload-appofapps-template

    gh api \
      --method PUT \
      -H "Accept: application/vnd.github+json" \
      -H "X-GitHub-Api-Version: 2022-11-28" \
      /orgs/eitco/teams/team-ams/repos/eitco/argo-repo-${cluster} \
      -f permission='push'

    gh ssh-key add ~/.ssh/id_rsa.pub --title "${cluster}-argocd-public-key"

    gh repo clone ${repourl} && cd argo-repo-${cluster}

    sed -i "s#repoURL: <REPLACE-REPO-URL>#repoURL: ${repourl}#" workload-clusters/*.yaml

    ### Setting Credentials and logging in ###
    git config user.name "eitco-github"
    git config user.email "github@eitco.de"
    git add -A
    git commit -m "Updating RepoURL for the Applications"
    git push origin main

    ### Transforming user-scoped SSH-Key into a repo-scoped Github Deploykey ###
    keyID=$(gh ssh-key list | grep "${cluster}-argocd-public-key" | awk '{print $5}')
    gh ssh-key delete $keyID -y
    gh repo deploy-key add ~/.ssh/id_rsa.pub --allow-write --title "${cluster}-argocd-deploy-key"

    ### Add ArgoCD Application ###
    kubectl config use-context $cluster-admin@$cluster

    kubectl apply -f - <<EOF
    apiVersion: v1
    kind: Secret
    metadata:
      labels:
        argocd.argoproj.io/secret-type: repo-creds
      name: argocd-repo-creds-ssh-creds-${cluster}
      namespace: argocd
    data:
      sshPrivateKey: ${encPrivateKey}
      url: ${encRepourl}
    type: Opaque
    ---
    apiVersion: v1
    kind: Secret
    metadata:
      labels:
        argocd.argoproj.io/secret-type: repository
      name: argocd-repo-private-repo-${cluster}
      namespace: argocd
    data:
      url: ${encRepourl}
    type: Opaque
    ---
    apiVersion: argoproj.io/v1alpha1
    kind: Application
    metadata:
      name: argocd-bootstrap
      namespace: argocd
    spec:
      project: default
      source:
        repoURL: ${repourl}
        path: workload-clusters
        targetRevision: main
      destination:
        name: in-cluster
        namespace: argocd
      syncPolicy:
        automated:
          prune: true
          selfHeal: true
    EOF
    
  remove-from-argocd.sh: |
    #!/bin/sh

    cluster=$1

    argocd login argo-hub-mgmt-t.projekte.eitco.de --insecure --grpc-web --username admin --password $PASSWORD

    argocd cluster rm $cluster -y || true

    # Delete Repo on Github, since it is no longer needed
    gh auth login

    gh repo delete eitco/argo-repo-"${cluster}" --yes